[
  {
    "objectID": "ST558_HW4.html",
    "href": "ST558_HW4.html",
    "title": "ST558_HW4",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\n\n\nlapply() uses a defined function on each element of a list or vector. It then returns a list of the same length as the input list or vector with the maniupated elements. In the purrr package, the equivalent function is the purrr::map() function.\n\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\n\n\ndf_a &lt;- data.frame(a = c(1, 2, 3, 4), b = c(8, 5, 2, 7))\ndf_b &lt;- data.frame(x = c(5, 6, 4, 8), y = c(14, 5, 76, 23))\nmy_list &lt;- list(df_a, df_b)\n\nlapply(my_list, FUN = cor, method = \"kendall\")\n\n[[1]]\n           a          b\na  1.0000000 -0.3333333\nb -0.3333333  1.0000000\n\n[[2]]\n           x          y\nx  1.0000000 -0.3333333\ny -0.3333333  1.0000000\n\n\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\n\n\n\nthe tidyverse functions (i.e. purrr) allow us to write consistent shorthand functions.\n\ntidyverse functions allow you to specify the type of output. This is an example of consistency that allows us to know for certain what the output of a function will be.\n\n\n\nWhat is a side-effect function?\n\n\n\nA side effect function does not change or transform the underlying data, it just creates a new object or other item based on the existing data. Examples include; print(), plot(), and write_csv(), among others.\n\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\n\n\nBecause of ‘Lexical Scoping’, i.e. the separate environment which is temporarily in use while the function executes. This means that variables defined within the function are only effective/active while a function is being executed and/or called.\n\n\n\n\n\n\n\nWe would like to write a function that applies the Root Mean Square Function on a response vector and a predictor vector.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nget_RMSE &lt;- function(p_v, r_v, ...) {\n  map2(p_v, r_v, \\(p_v, r_v) (r_v - p_v)^2) |&gt;\n    unlist() |&gt;\n    mean(...) |&gt;\n    sqrt()\n}\n\n\nWe will now generate test vectors to use with the “get_RMSE” function above.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\nTesting the RMSE function using the generated data sets above yields the following results:\n\n\nget_RMSE(pred, resp)\n\n[1] 0.9581677\n\n\n\nHow will the function respond if there are missing or “NA” values in either vector? We will start by replacing two of the “response” values with NAs, then run the get_RMSE() function again accounting for the NAs.\n\n\nresp[23] &lt;- NA_real_\nresp[59] &lt;- NA_real_\n\nget_RMSE(pred, resp, na.rm = TRUE)\n\n[1] 0.954419\n\n\n\n\n\n\nWe can also write a similar function to calculate the Mean Absolute Deviation of two vectors.\n\n\nget_MAE &lt;- function(p_v, r_v, ...) {\n  map2(p_v, r_v, \\(p_v, r_v) abs(r_v - p_v)) |&gt;\n    unlist() |&gt;\n    mean(...)\n}\n\n\nSimilar to above - generate a set of predictor & response variables to test out the get_MAE() function.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nget_MAE(pred, resp)\n\n[1] 0.8155776\n\n\n\nTest the get_MAE() function when values from either vector are NA.\n\n\nresp[48] &lt;- NA_real_\nresp[81] &lt;- NA_real_\n\nget_MAE(pred, resp, na.rm = TRUE)\n\n[1] 0.8115082\n\n\n\n\n\n\nCreate a wrapper function which combines the preceding functions for calculating RMSE & MAE.\n\n\nerror_calc &lt;- function(p_v, r_v, metric = \"both\", ...) {\n  if (!is.vector(p_v) | !is.vector(r_v)) {\n    stop(\"Data entered does not include 2 vectors\")\n  }\n  if (!is.atomic(p_v) | !is.atomic(r_v)) {\n    stop(\"Data entered does not include 2 atomic vectors\")\n  }\n  if (!is.numeric(p_v) | !is.numeric(r_v)) {\n    stop(\"Data entered is not numeric\")\n  }\n  m &lt;- get_MAE(p_v, r_v, ...)\n  r &lt;- get_RMSE(p_v, r_v, ...)\n  comb &lt;- list(m, r)\n  names(comb)[1] &lt;- \"MAE\"\n  names(comb)[2] &lt;- \"RMSE\"\n  ifelse(metric == \"both\", return(comb),\n         ifelse(metric == \"MAE\", return(comb[1]),\n                ifelse(metric == \"RMSE\", return(comb[2]))))\n}\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nerror_calc(pred, resp)\n\n$MAE\n[1] 0.8155776\n\n$RMSE\n[1] 0.9581677\n\n\n\nTest with a non-default ‘calc_type’ value.\n\n\nerror_calc(pred, resp, metric = \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\n\nAgain - we’ll attempt the combined function if some values are NA.\n\n\nresp[7] &lt;- NA_real_\nresp[61] &lt;- NA_real_\nresp[92] &lt;- NA_real_\n\nerror_calc(pred, resp, na.rm = TRUE)\n\n$MAE\n[1] 0.8058875\n\n$RMSE\n[1] 0.9517366\n\n\n\nThe final test will be to verify the function stops & gives an error message if incorrect data is supplied. First by supplying a dataframe instead of a vector.\n\n\ndf_1 &lt;- as.data.frame(c(1, 2, 3, 4))\nvec_2 &lt;- c(5, \"lion\", 9, 8)\n\nerror_calc(df_1, vec_2)\n\nError in error_calc(df_1, vec_2): Data entered does not include 2 vectors\n\n\n\nNext by supplying a vector with a non-numeric element.\n\n\nv1 &lt;- c(79, 28, 50, 27, 49)\nv2 &lt;- c(14, 60, 96, \"lion\", 45)\n\nerror_calc(v1, v2)\n\nError in error_calc(v1, v2): Data entered is not numeric\n\n\n\n\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\n\nIdentify news resources related to Autism and parse the data accordingly to disply individual article information:\n\n\nx &lt;- GET(url = \"https://newsapi.org/v2/everything?q=autism&apiKey=7cb9cb041cf24cbe9c0b87d48ac7f1dd&language=en\")\n\nparsed &lt;- fromJSON(rawToChar(x$content))\nt_cont &lt;- as_tibble(parsed$articles)\nhead(t_cont)\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 ars-techn… Ars … Beth … Vacc… Vaccine mi… http… https://c… 2024-06-05… \"Enlar…\n2 wired      Wired Maken… Unwe… TikTok cre… http… https://m… 2024-06-24… \"Rober…\n3 &lt;NA&gt;       BBC … &lt;NA&gt;   Brit… Ten finali… http… https://i… 2024-06-02… \"Noor …\n4 &lt;NA&gt;       Scie… Steve… RFK … Conspiracy… http… https://s… 2024-06-03… \"With …\n5 &lt;NA&gt;       Medi… Scien… Brai… Some child… http… https://s… 2024-06-06… \"This …\n6 &lt;NA&gt;       Scie… Jerom… Neur… When teach… http… https://s… 2024-05-30… \"This …\n\n\n\nWrite a function to query newsapi.org with the following selections: 1) Title/subject for search (i.e. keyword) 2) A time period to search from 3) An API key\n\n\npull_news &lt;- function(keyword = \"NCSU\", from_time = \"2024-06-10\",\n                      api_key = \"7cb9cb041cf24cbe9c0b87d48ac7f1dd\") {\n  f_url &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", keyword,\n                  \"&from=\", from_time,\n                  \"&apiKey=\", api_key,\n                  \"&language=en\")\n  x &lt;- GET(f_url)\n  parsed &lt;- fromJSON(rawToChar(x$content))\n  t_cont &lt;- as_tibble(parsed$articles)\n  return(t_cont)\n}\n\nhead(pull_news(keyword = \"Gettysburg\"))\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 &lt;NA&gt;       NPR   B.A. … Appr… \"Code Swit… http… https://n… 2024-06-19… \"So, t…\n2 &lt;NA&gt;       The … Casey… The … \"Casey Cep… http… https://m… 2024-06-24… \"Just …\n3 &lt;NA&gt;       Spro… Ronni… High… \"An effect… http… https://m… 2024-06-11… \"An ef…\n4 cbs-news   CBS … Nikol… New … \"It includ… http… https://a… 2024-06-15… \"Washi…\n5 business-… Busi… Talia… See … \"The museu… http… https://i… 2024-06-22… \"The N…\n6 &lt;NA&gt;       The … Dana … Man … \"Police in… http… https://c… 2024-06-21… \"Polic…\n\n\n\nhead(pull_news(\"Descartes\", from_time = \"2024-06-16\"))\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 &lt;NA&gt;       Mark… &lt;NA&gt;   Desc… \"(marketsc… http… https://w… 2024-06-17… \"Discl…\n2 &lt;NA&gt;       Mark… &lt;NA&gt;   Scot… \"(marketsc… http… https://w… 2024-06-18… \"ATLAN…\n3 &lt;NA&gt;       ETF … Marke… Raim… \"The Desca… http… https://w… 2024-06-16… \"The D…\n4 &lt;NA&gt;       Psyc… Emma … Yes,… \"Breathwor… http… https://c… 2024-06-19… \"This …\n5 &lt;NA&gt;       ETF … Marke… The … \"Quadratur… http… https://w… 2024-06-18… \"Quadr…\n6 financial… Fina… Globe… Scot… \"ATLANTA a… http… &lt;NA&gt;       2024-06-18… \"Autho…"
  },
  {
    "objectID": "ST558_HW4.html#advanced-function-writing-api-queries",
    "href": "ST558_HW4.html#advanced-function-writing-api-queries",
    "title": "ST558_HW4",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\n\n\nlapply() uses a defined function on each element of a list or vector. It then returns a list of the same length as the input list or vector with the maniupated elements. In the purrr package, the equivalent function is the purrr::map() function.\n\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\n\n\ndf_a &lt;- data.frame(a = c(1, 2, 3, 4), b = c(8, 5, 2, 7))\ndf_b &lt;- data.frame(x = c(5, 6, 4, 8), y = c(14, 5, 76, 23))\nmy_list &lt;- list(df_a, df_b)\n\nlapply(my_list, FUN = cor, method = \"kendall\")\n\n[[1]]\n           a          b\na  1.0000000 -0.3333333\nb -0.3333333  1.0000000\n\n[[2]]\n           x          y\nx  1.0000000 -0.3333333\ny -0.3333333  1.0000000\n\n\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\n\n\n\nthe tidyverse functions (i.e. purrr) allow us to write consistent shorthand functions.\n\ntidyverse functions allow you to specify the type of output. This is an example of consistency that allows us to know for certain what the output of a function will be.\n\n\n\nWhat is a side-effect function?\n\n\n\nA side effect function does not change or transform the underlying data, it just creates a new object or other item based on the existing data. Examples include; print(), plot(), and write_csv(), among others.\n\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\n\n\nBecause of ‘Lexical Scoping’, i.e. the separate environment which is temporarily in use while the function executes. This means that variables defined within the function are only effective/active while a function is being executed and/or called.\n\n\n\n\n\n\n\nWe would like to write a function that applies the Root Mean Square Function on a response vector and a predictor vector.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nget_RMSE &lt;- function(p_v, r_v, ...) {\n  map2(p_v, r_v, \\(p_v, r_v) (r_v - p_v)^2) |&gt;\n    unlist() |&gt;\n    mean(...) |&gt;\n    sqrt()\n}\n\n\nWe will now generate test vectors to use with the “get_RMSE” function above.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\nTesting the RMSE function using the generated data sets above yields the following results:\n\n\nget_RMSE(pred, resp)\n\n[1] 0.9581677\n\n\n\nHow will the function respond if there are missing or “NA” values in either vector? We will start by replacing two of the “response” values with NAs, then run the get_RMSE() function again accounting for the NAs.\n\n\nresp[23] &lt;- NA_real_\nresp[59] &lt;- NA_real_\n\nget_RMSE(pred, resp, na.rm = TRUE)\n\n[1] 0.954419\n\n\n\n\n\n\nWe can also write a similar function to calculate the Mean Absolute Deviation of two vectors.\n\n\nget_MAE &lt;- function(p_v, r_v, ...) {\n  map2(p_v, r_v, \\(p_v, r_v) abs(r_v - p_v)) |&gt;\n    unlist() |&gt;\n    mean(...)\n}\n\n\nSimilar to above - generate a set of predictor & response variables to test out the get_MAE() function.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nget_MAE(pred, resp)\n\n[1] 0.8155776\n\n\n\nTest the get_MAE() function when values from either vector are NA.\n\n\nresp[48] &lt;- NA_real_\nresp[81] &lt;- NA_real_\n\nget_MAE(pred, resp, na.rm = TRUE)\n\n[1] 0.8115082\n\n\n\n\n\n\nCreate a wrapper function which combines the preceding functions for calculating RMSE & MAE.\n\n\nerror_calc &lt;- function(p_v, r_v, metric = \"both\", ...) {\n  if (!is.vector(p_v) | !is.vector(r_v)) {\n    stop(\"Data entered does not include 2 vectors\")\n  }\n  if (!is.atomic(p_v) | !is.atomic(r_v)) {\n    stop(\"Data entered does not include 2 atomic vectors\")\n  }\n  if (!is.numeric(p_v) | !is.numeric(r_v)) {\n    stop(\"Data entered is not numeric\")\n  }\n  m &lt;- get_MAE(p_v, r_v, ...)\n  r &lt;- get_RMSE(p_v, r_v, ...)\n  comb &lt;- list(m, r)\n  names(comb)[1] &lt;- \"MAE\"\n  names(comb)[2] &lt;- \"RMSE\"\n  ifelse(metric == \"both\", return(comb),\n         ifelse(metric == \"MAE\", return(comb[1]),\n                ifelse(metric == \"RMSE\", return(comb[2]))))\n}\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nerror_calc(pred, resp)\n\n$MAE\n[1] 0.8155776\n\n$RMSE\n[1] 0.9581677\n\n\n\nTest with a non-default ‘calc_type’ value.\n\n\nerror_calc(pred, resp, metric = \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\n\nAgain - we’ll attempt the combined function if some values are NA.\n\n\nresp[7] &lt;- NA_real_\nresp[61] &lt;- NA_real_\nresp[92] &lt;- NA_real_\n\nerror_calc(pred, resp, na.rm = TRUE)\n\n$MAE\n[1] 0.8058875\n\n$RMSE\n[1] 0.9517366\n\n\n\nThe final test will be to verify the function stops & gives an error message if incorrect data is supplied. First by supplying a dataframe instead of a vector.\n\n\ndf_1 &lt;- as.data.frame(c(1, 2, 3, 4))\nvec_2 &lt;- c(5, \"lion\", 9, 8)\n\nerror_calc(df_1, vec_2)\n\nError in error_calc(df_1, vec_2): Data entered does not include 2 vectors\n\n\n\nNext by supplying a vector with a non-numeric element.\n\n\nv1 &lt;- c(79, 28, 50, 27, 49)\nv2 &lt;- c(14, 60, 96, \"lion\", 45)\n\nerror_calc(v1, v2)\n\nError in error_calc(v1, v2): Data entered is not numeric\n\n\n\n\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\n\nIdentify news resources related to Autism and parse the data accordingly to disply individual article information:\n\n\nx &lt;- GET(url = \"https://newsapi.org/v2/everything?q=autism&apiKey=7cb9cb041cf24cbe9c0b87d48ac7f1dd&language=en\")\n\nparsed &lt;- fromJSON(rawToChar(x$content))\nt_cont &lt;- as_tibble(parsed$articles)\nhead(t_cont)\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 ars-techn… Ars … Beth … Vacc… Vaccine mi… http… https://c… 2024-06-05… \"Enlar…\n2 wired      Wired Maken… Unwe… TikTok cre… http… https://m… 2024-06-24… \"Rober…\n3 &lt;NA&gt;       BBC … &lt;NA&gt;   Brit… Ten finali… http… https://i… 2024-06-02… \"Noor …\n4 &lt;NA&gt;       Scie… Steve… RFK … Conspiracy… http… https://s… 2024-06-03… \"With …\n5 &lt;NA&gt;       Medi… Scien… Brai… Some child… http… https://s… 2024-06-06… \"This …\n6 &lt;NA&gt;       Scie… Jerom… Neur… When teach… http… https://s… 2024-05-30… \"This …\n\n\n\nWrite a function to query newsapi.org with the following selections: 1) Title/subject for search (i.e. keyword) 2) A time period to search from 3) An API key\n\n\npull_news &lt;- function(keyword = \"NCSU\", from_time = \"2024-06-10\",\n                      api_key = \"7cb9cb041cf24cbe9c0b87d48ac7f1dd\") {\n  f_url &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", keyword,\n                  \"&from=\", from_time,\n                  \"&apiKey=\", api_key,\n                  \"&language=en\")\n  x &lt;- GET(f_url)\n  parsed &lt;- fromJSON(rawToChar(x$content))\n  t_cont &lt;- as_tibble(parsed$articles)\n  return(t_cont)\n}\n\nhead(pull_news(keyword = \"Gettysburg\"))\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 &lt;NA&gt;       NPR   B.A. … Appr… \"Code Swit… http… https://n… 2024-06-19… \"So, t…\n2 &lt;NA&gt;       The … Casey… The … \"Casey Cep… http… https://m… 2024-06-24… \"Just …\n3 &lt;NA&gt;       Spro… Ronni… High… \"An effect… http… https://m… 2024-06-11… \"An ef…\n4 cbs-news   CBS … Nikol… New … \"It includ… http… https://a… 2024-06-15… \"Washi…\n5 business-… Busi… Talia… See … \"The museu… http… https://i… 2024-06-22… \"The N…\n6 &lt;NA&gt;       The … Dana … Man … \"Police in… http… https://c… 2024-06-21… \"Polic…\n\n\n\nhead(pull_news(\"Descartes\", from_time = \"2024-06-16\"))\n\n# A tibble: 6 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 &lt;NA&gt;       Mark… &lt;NA&gt;   Desc… \"(marketsc… http… https://w… 2024-06-17… \"Discl…\n2 &lt;NA&gt;       Mark… &lt;NA&gt;   Scot… \"(marketsc… http… https://w… 2024-06-18… \"ATLAN…\n3 &lt;NA&gt;       ETF … Marke… Raim… \"The Desca… http… https://w… 2024-06-16… \"The D…\n4 &lt;NA&gt;       Psyc… Emma … Yes,… \"Breathwor… http… https://c… 2024-06-19… \"This …\n5 &lt;NA&gt;       ETF … Marke… The … \"Quadratur… http… https://w… 2024-06-18… \"Quadr…\n6 financial… Fina… Globe… Scot… \"ATLANTA a… http… &lt;NA&gt;       2024-06-18… \"Autho…"
  }
]